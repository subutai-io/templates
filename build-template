
# Do not run directly!

fail() {
    echo $2
    exit $1
}

# Shortcuts
CWD=`pwd`
BUILD=${ZFS_ROOT}/${ZFS_BUILD}
ROOTRW=${BUILD}/rootfs.rw
VARRW=${BUILD}/var.rw
OPTRW=${BUILD}/opt.rw
HOMERW=${BUILD}/home.rw
ROOTRO=${BUILD}/rootfs
VARRO=${BUILD}/var
OPTRO=${BUILD}/opt
HOMERO=${BUILD}/home
DELTAS=${BUILD}/deltas

# Do a bit of sanity test
[ ! -d /${ZFS_ROOT} ] && fail 1 "The directory ${ZFS_ROOT} does not exists!" 

[ -d ${BUILD} ] && fail 2 "The directory ${BUILD} already exists!" 

sudo -S -v || fail 3 "sudo -S does not appear to be working"

# Install build tools

sudo -S apt-get install eatmydata debootstrap

# Create necessary subvolumes
cat <<-BANNER
*******************
Creating subvolumes
*******************
BANNER

sudo -S modprobe zfs || fail 3 "Unable to load ZFS kernel module"
sudo -S zfs create ${BUILD} || fail 3 "Unable to create build directory ${BUILD}"
sudo -S zfs create ${ROOTRW} || fail 3 "Unable to create rootfs directory ${ROOTRW}"

# Bootstrap Debian/Ubuntu
cat <<-BANNER
*******************
Running debootstrap
*******************
BANNER

sudo -S cdebootstrap --include=${EXTRA} ${BASE} /${ROOTRW} ${REP}

# Mount proc and sys
cat <<-BANNER
*****************
Mounting proc/sys
*****************
BANNER

sudo -S mount sysfs /${ROOTRW}/sys -t sysfs
sudo -S mount proc /${ROOTRW}/proc -t proc

# Update hostname
cat <<-BANNER
****************
Setting Hostname
****************
BANNER

cat <<-EOF | sudo -S chroot /${ROOTRW} /bin/bash -c "cat >/etc/hostname"
${NAME}
EOF

# Create subutai_template_version
cat <<-BANNER
********************************
Setting Subutai Template Version
********************************
BANNER

echo "Version is ${NAME}@${VERSION}"
cat <<-EOF | sudo -S chroot /${ROOTRW} /bin/bash -c "cat >/etc/subutai_template_version"
${NAME}@${VERSION}
EOF

# Create /etc/networking/interfaces
cat <<-BANNER
**************************
Setting Network Interfaces
**************************
BANNER

cat <<-EOF | sudo -S chroot /${ROOTRW} /bin/bash -c "cat >/etc/network/interfaces"
# Subutai Networking Default Configuration

# Local
auto lo
iface lo inet loopback

# Ethernet
auto eth0
iface eth0 inet dhcp

EOF

# Set apt-get repos
cat <<-BANNER
*************
Setting Repos
*************
BANNER

if [ -n "${REPOS}" ]; then
    echo "${REPOS}" | sudo -S chroot /${ROOTRW} /bin/bash -c "cat >/etc/apt/sources.list"
fi

# Add Keys
cat <<-BANNER
***********
Adding keys
***********
BANNER

for KEY in ${KEYS}; do
sudo -S chroot /${ROOTRW} /bin/bash -c "apt-key adv --recv-keys --keyserver keyserver.ubuntu.com ${KEY}"
done

# Run update
cat <<-BANNER
********
Updating
********
BANNER

sudo -S chroot /${ROOTRW} /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y update"
sudo -S chroot /${ROOTRW} /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade"

# Optional extras
cat <<-BANNER
*****************
Installing extras
*****************
BANNER
sudo -S chroot /${ROOTRW} /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y --allow-unauthenticated install ${PKGS}"

# Run extra commands
cat <<-BANNER
**************
Extra Commands
**************
BANNER

sudo -S chroot /${ROOTRW} /bin/bash -c "${CMDS}"

# Create package list
cat <<-BANNER
*********************
Creating package list
*********************
BANNER

sudo -S chroot /${ROOTRW} /bin/bash -c "dpkg --get-selections > /packages"
sudo -S mv /${ROOTRW}/packages /$BUILD

# Clean up 
cat <<-BANNER
***********
Cleaning up
***********
BANNER

sudo -S chroot /${ROOTRW} /bin/bash -c "apt-get -y clean"
sudo -S chroot /${ROOTRW} /bin/bash -c "rm -f /var/cache/apt/*.bin"
sudo -S chroot /${ROOTRW} /bin/bash -c "rm -rf /var/lib/apt/lists/*"

# Unmount
cat <<-BANNER
********************
Unmounting temporary
********************
BANNER

sudo -S umount /${ROOTRW}/sys
sudo -S umount /${ROOTRW}/proc

# Deal with mounts
cat <<-BANNER
********************
Moving files
********************
BANNER

sudo -S zfs create ${VARRW}
if ! `ls -A /${ROOTRW}/var`; then
    sudo -S mv /${ROOTRW}/var/* /${VARRW}
fi

sudo -S zfs create ${OPTRW}
if ! `ls -A /${ROOTRW}/opt`; then
    sudo -S mv /${ROOTRW}/opt/* /${OPTRW}
fi

sudo -S zfs create ${HOMERW}
if ! `ls -A /${ROOTRW}/home`; then
    sudo -S mv /$ROOTRW/home/* /${HOMERW}
fi

# Finally snapshot all
cat <<-BANNER
********************
Readonly snapshots
********************
BANNER

sudo -S zfs snapshot ${ROOTRW}@now
sudo -S zfs snapshot ${VARRW}@now
sudo -S zfs snapshot ${OPTRW}@now
sudo -S zfs snapshot ${HOMERW}@now

# Save deltas
cat <<-BANNER
********************
Creating deltas
********************
BANNER

sudo -S mkdir /${DELTAS}
sudo -S zfs send ${ROOTRW}@now | sudo -S tee /${DELTAS}/rootfs.delta >/dev/null
sudo -S zfs send ${VARRW}@now | sudo -S tee /${DELTAS}/var.delta >/dev/null
sudo -S zfs send ${OPTRW}@now | sudo -S tee /${DELTAS}/opt.delta >/dev/null
sudo -S zfs send ${HOMERW}@now | sudo -S tee /${DELTAS}/home.delta >/dev/null

ls -l /${DELTAS}/*.delta

# Make sure deltas can be read by a normal user
sudo -S chmod 644 /${DELTAS}/*

# Delete subvolumes
cat <<-BANNER
********************
Deleting subvolumes
********************
BANNER

sudo -S zfs destroy -r ${ROOTRW}
sudo -S zfs destroy -r ${VARRW}
sudo -S zfs destroy -r ${OPTRW}
sudo -S zfs destroy -r ${HOMERW}

# Create config
cat <<-BANNER
************************
Creating template config
************************
BANNER

cat <<-EOF | sudo -S tee /${BUILD}/config >/dev/null
lxc.arch = amd64
lxc.utsname = ${NAME}
lxc.rootfs.backend=zfs
subutai.template = ${NAME}
subutai.template.owner = ${OWNER}
subutai.template.version = ${VERSION}
subutai.parent = ${NAME}
subutai.parent.owner = ${OWNER}
subutai.parent.version = ${VERSION}
lxc.mount.entry=/var/lib/lxc/${NAME}:${OWNER}:${VERSION}/var var none bind,rw 0 0
lxc.mount.entry=/var/lib/lxc/${NAME}:${OWNER}:${VERSION}/opt opt none bind,rw 0 0
lxc.mount.entry=/var/lib/lxc/${NAME}:${OWNER}:${VERSION}/home home none bind,rw 0 0
lxc.rootfs=/var/lib/lxc/${NAME}:${OWNER}:${VERSION}/rootfs
lxc.network.type = veth
lxc.network.script.up = /usr/sbin/subutai-create-interface
lxc.include = /usr/share/subutai/config/subutai.conf
lxc.tty = 0
EOF

cat <<-EOF | sudo -S tee /${BUILD}/fstab
EOF

# Bundle the darn thing in a tar.gz archive
cat <<-BANNER
************************
Creating Bundle
************************
BANNER

[ -d ${CWD}/build ] || mkdir ${CWD}/build
(cd /${BUILD} ; tar cz * >${CWD}/build/${NAME}-${OWNER}-template_${VERSION}_amd64.tar.gz)
ls -l ${CWD}/build/${NAME}-${OWNER}-template_${VERSION}_amd64.tar.gz

# Finally nuke build
cat <<-BANNER
************************
Cleaning up
************************
BANNER

sudo -S zfs destroy -r ${BUILD}

exit 0

# vim: ts=4 et nowrap autoindent
